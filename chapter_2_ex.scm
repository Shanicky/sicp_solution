;; exercise 2.1
(define (make-rat n d)
  (cond ((< d 0) (make-rat (- n) (- d)))	
	(else (cons n d))))
(make-rat -3 -5)
(make-rat 3 -5)
(make-rat -3 5)
(make-rat 3 5)
;; exercise 2.2
(define (make-segment start end)
  (cons start end))
(define (start-segment segment)
  (car segment))
(define (end-segment segment)
  (cdr segment))
(define (make-point x y)
  (cons x y))
(define (x-point point)
  (car point))
(define (y-point point)
  (cdr point))
(define (midpoint-segment segment)
  (let ((midx (/ (+ (x-point (start-segment segment)) (x-point (end-segment segment))) 2))
	(midy (/ (+ (y-point (start-segment segment)) (y-point (end-segment segment))) 2)))
    (make-point midx midy)))

(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))
(define a (make-segment (make-point 1 1) (make-point 2 2)))
(print-point (midpoint-segment a))
;;exercise 2.3
(define (make-rect left bottom right top)
  (cons (cons left bottom) (cons right top)))
(define (left-rect rect)
  (car (car rect)))
(define (right-rect rect)
  (car (cdr rect)))
(define (bottom-rect rect)
  (cdr (car rect)))
(define (top-rect rect)
  (cdr (cdr rect)))

(define (make-rect-p lt lb rb rt)
  (cons (cons lt lb) (cons rb rt)))
(define (left-rect-p rect)
  (make-segment (car (car rect)) (cdr (car rect))))
(define (bottom-rect-p rect)
  (make-segment (cdr (car rect)) (car (cdr rect))))
(define (right-rect-p rect)
  (make-segment (car (cdr rect)) (cdr (cdr rect))))
(define (top-rect-p rect)
  (make-segment (car (car rect)) (cdr (cdr rect))))
(define (sqr x)
  (* x x))
(define (length segment)
  (let ((x1 (x-point (start-segment segment)))
	(x2 (x-point (end-segment segment)))
	(y1 (y-point (start-segment segment)))
	(y2 (y-point (end-segment segment))))
    (sqrt (+ (sqr (- y2 y1)) (sqr (- x2 x1))))))
(length a)
;; four point (1,2) (1,1) (2,1) (2,2) 
(define lt (make-point 1 2))
(define lb (make-point 1 1))
(define rb (make-point 2 1))
(define rt (make-point 2 2))
(define left (make-segment lt lb))
(define bottom (make-segment lb rb))
(define right (make-segment rb rt))
(define top (make-segment lt rt))
(define A (make-rect left bottom right top))
(define B (make-rect-p lt lb rb rt))
(define (area rect)
  (* (length (left-rect-p rect)) (length (bottom-rect-p rect))))
(area B)
(define (double x)
  (* x 2))
(define (perimeter rect)
  (double (+ (length (left-rect rect)) (length(bottom-rect rect)))))
(perimeter A)
;;exercise 2.4
(define (mycons x y)
  (lambda (m) (m x y)))
(define (mycar z)
  (z (lambda (p q) p)))
(define (mycdr z)
  (z (lambda (p q) q)))
;;exercise 2.5
(define (pow x n)
  (define (pow-iter result i)
    (if (= i 0)
	result
	(pow-iter (* result x) (- i 1))))
  (pow-iter 1 n))
(define (powdc x n)
  (if (odd? n)
      (* x (powdc x (- n 1)))
      (if (= n 0)
	  1
	  (sqr (powdc x (/ n 2))))))
(define (pcons x y)
  (* (pow 2 x) (pow 3 y)))
(define (pacr n)
  (if (odd? n)
      0
      (+ 1 (pacr (/ n 2)))))
(define (pcdr n)
  (cond ((even? n) (pcdr (/ n 2)))
	((= n 1) 0)
	(else (+ 1 (pcdr (/ n 3))))))
;;exercise 2.6
(define one
  (lambda (f) (lambda (x) (f x))))
(define two
  (lambda (f) (lambda (x) (f (f x)))))
(define zero
  (lambda (f) (lambda (x) x)))
(define (add-1 n)
  (lambda (f) (lambda (x) (f ((n f) x)))))
